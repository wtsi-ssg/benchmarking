#default:
#  image:
#  name: gitlab-registry.internal.sanger.ac.uk/isg/gitlab-ci-docker-docker

# this fragment starts the Docker daemon inside the CI-launched
# container
.job_template: &start_docker
    before_script:
        - mkdir -p /etc/docker
        - echo '{"registry-mirrors":["https://docker-hub-mirror.internal.sanger.ac.uk:5000"],"default-address-pools":[{"base":"192.168.4.0/16","size":24}]}' > /etc/docker/daemon.json
        - dockerd > /var/log/dockerd.log 2>&1 &
        - sleep 10


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
#  - deploy

build-job:       # This job runs in the build stage, which runs first.
  stage: build
  tags:
   - autoscale
   - openstack-autoscale-theta-docker-in-docker
  <<: *start_docker
  script:
    - echo "Building docker image..."
    - docker build -t wsisci/benchmarking .
    - echo "Build complete, stashing the image."
    - mkdir image
    - docker save wsisci/benchmarking > image/app.tar
  artifacts:
    paths:
      - image


unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  tags:
   - autoscale
   - openstack-autoscale-theta-docker-in-docker
  <<: *start_docker
  script:
    - docker load -i image/app.tar
    - echo "Running unit tests... This will take about 60 seconds."
    - docker run --privileged -v /data/:/data wsisci/benchmarking threaded
    - echo "Code coverage is 90%"

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

include:
- template: Security/Secret-Detection.gitlab-ci.yml
